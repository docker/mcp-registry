{
  "generatedAt": "2025-09-13T11:40:03.497Z",
  "server": "@unrealengine/mcp-server",
  "version": "1.2.0",
  "consolidated": [
    {
      "name": "manage_asset",
      "description": "Manage assets - list, import, create materials",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "list",
              "import",
              "create_material"
            ],
            "description": "Action to perform"
          },
          "directory": {
            "type": "string",
            "description": "Directory path for listing"
          },
          "recursive": {
            "type": "boolean",
            "description": "List recursively"
          },
          "sourcePath": {
            "type": "string",
            "description": "Source file path"
          },
          "destinationPath": {
            "type": "string",
            "description": "Destination path"
          },
          "name": {
            "type": "string",
            "description": "Asset name"
          },
          "path": {
            "type": "string",
            "description": "Save path"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "assets": {
            "type": "array",
            "description": "List of assets (for list action)",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string"
                },
                "Path": {
                  "type": "string"
                },
                "Class": {
                  "type": "string"
                },
                "PackagePath": {
                  "type": "string"
                }
              }
            }
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Imported asset paths (for import)"
          },
          "materialPath": {
            "type": "string",
            "description": "Created material path (for create_material)"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          },
          "error": {
            "type": "string",
            "description": "Error message if failed"
          }
        }
      }
    },
    {
      "name": "control_actor",
      "description": "Control actors - spawn, delete, apply physics",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "spawn",
              "delete",
              "apply_force"
            ],
            "description": "Action to perform"
          },
          "actorName": {
            "type": "string",
            "description": "Actor name"
          },
          "classPath": {
            "type": "string",
            "description": "Blueprint/class path"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "rotation": {
            "type": "object",
            "properties": {
              "pitch": {
                "type": "number"
              },
              "yaw": {
                "type": "number"
              },
              "roll": {
                "type": "number"
              }
            }
          },
          "force": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "actor": {
            "type": "string",
            "description": "Spawned actor name (for spawn)"
          },
          "deleted": {
            "type": "string",
            "description": "Deleted actor name (for delete)"
          },
          "physicsEnabled": {
            "type": "boolean",
            "description": "Physics state (for apply_force)"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          },
          "error": {
            "type": "string",
            "description": "Error message if failed"
          }
        }
      }
    },
    {
      "name": "control_editor",
      "description": "Control editor - PIE mode, camera, viewport",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "play",
              "stop",
              "set_camera",
              "set_view_mode"
            ],
            "description": "Editor action"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "rotation": {
            "type": "object",
            "properties": {
              "pitch": {
                "type": "number"
              },
              "yaw": {
                "type": "number"
              },
              "roll": {
                "type": "number"
              }
            }
          },
          "viewMode": {
            "type": "string",
            "description": "View mode (Lit, Unlit, Wireframe, etc.)"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "playing": {
            "type": "boolean",
            "description": "PIE play state"
          },
          "location": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Camera location [x, y, z]"
          },
          "rotation": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Camera rotation [pitch, yaw, roll]"
          },
          "viewMode": {
            "type": "string",
            "description": "Current view mode"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          }
        }
      }
    },
    {
      "name": "manage_level",
      "description": "Manage levels and lighting",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "load",
              "save",
              "stream",
              "create_light",
              "build_lighting"
            ],
            "description": "Level action"
          },
          "levelPath": {
            "type": "string",
            "description": "Level path"
          },
          "levelName": {
            "type": "string",
            "description": "Level name"
          },
          "streaming": {
            "type": "boolean",
            "description": "Use streaming"
          },
          "shouldBeLoaded": {
            "type": "boolean",
            "description": "Load or unload"
          },
          "shouldBeVisible": {
            "type": "boolean",
            "description": "Visibility"
          },
          "lightType": {
            "type": "string",
            "enum": [
              "Directional",
              "Point",
              "Spot",
              "Rect"
            ],
            "description": "Light type"
          },
          "name": {
            "type": "string",
            "description": "Object name"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "intensity": {
            "type": "number",
            "description": "Light intensity"
          },
          "quality": {
            "type": "string",
            "enum": [
              "Preview",
              "Medium",
              "High",
              "Production"
            ],
            "description": "Build quality"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "levelName": {
            "type": "string",
            "description": "Level name"
          },
          "loaded": {
            "type": "boolean",
            "description": "Level loaded state"
          },
          "visible": {
            "type": "boolean",
            "description": "Level visibility"
          },
          "lightName": {
            "type": "string",
            "description": "Created light name"
          },
          "buildQuality": {
            "type": "string",
            "description": "Lighting build quality used"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          }
        }
      }
    },
    {
      "name": "animation_physics",
      "description": "Animation and physics systems",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "create_animation_bp",
              "play_montage",
              "setup_ragdoll"
            ],
            "description": "Action type"
          },
          "name": {
            "type": "string",
            "description": "Asset name"
          },
          "actorName": {
            "type": "string",
            "description": "Actor name"
          },
          "skeletonPath": {
            "type": "string",
            "description": "Skeleton path"
          },
          "montagePath": {
            "type": "string",
            "description": "Montage path"
          },
          "animationPath": {
            "type": "string",
            "description": "Animation path"
          },
          "playRate": {
            "type": "number",
            "description": "Play rate"
          },
          "physicsAssetName": {
            "type": "string",
            "description": "Physics asset"
          },
          "blendWeight": {
            "type": "number",
            "description": "Blend weight"
          },
          "savePath": {
            "type": "string",
            "description": "Save location"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "blueprintPath": {
            "type": "string",
            "description": "Created animation blueprint path"
          },
          "playing": {
            "type": "boolean",
            "description": "Montage playing state"
          },
          "playRate": {
            "type": "number",
            "description": "Current play rate"
          },
          "ragdollActive": {
            "type": "boolean",
            "description": "Ragdoll activation state"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          }
        }
      }
    },
    {
      "name": "create_effect",
      "description": "Create visual effects - particles, Niagara",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "particle",
              "niagara",
              "debug_shape"
            ],
            "description": "Effect type"
          },
          "name": {
            "type": "string",
            "description": "Effect name"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "effectType": {
            "type": "string",
            "description": "Effect type (Fire, Smoke, Water, etc.)"
          },
          "systemPath": {
            "type": "string",
            "description": "Niagara system path"
          },
          "scale": {
            "type": "number",
            "description": "Scale factor"
          },
          "shape": {
            "type": "string",
            "description": "Debug shape (Line, Box, Sphere, etc.)"
          },
          "size": {
            "type": "number",
            "description": "Size/radius"
          },
          "color": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "RGBA color"
          },
          "duration": {
            "type": "number",
            "description": "Duration"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "effectName": {
            "type": "string",
            "description": "Created effect name"
          },
          "effectPath": {
            "type": "string",
            "description": "Effect asset path"
          },
          "spawned": {
            "type": "boolean",
            "description": "Whether effect was spawned in level"
          },
          "location": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Effect location [x, y, z]"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          }
        }
      }
    },
    {
      "name": "manage_blueprint",
      "description": "Create and modify blueprints",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "create",
              "add_component"
            ],
            "description": "Blueprint action"
          },
          "name": {
            "type": "string",
            "description": "Blueprint name"
          },
          "blueprintType": {
            "type": "string",
            "description": "Type (Actor, Pawn, Character, etc.)"
          },
          "componentType": {
            "type": "string",
            "description": "Component type"
          },
          "componentName": {
            "type": "string",
            "description": "Component name"
          },
          "savePath": {
            "type": "string",
            "description": "Save location"
          }
        },
        "required": [
          "action",
          "name"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "blueprintPath": {
            "type": "string",
            "description": "Blueprint asset path"
          },
          "componentAdded": {
            "type": "string",
            "description": "Added component name"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          },
          "warning": {
            "type": "string",
            "description": "Warning if manual steps needed"
          }
        }
      }
    },
    {
      "name": "build_environment",
      "description": "Build environment - landscape, foliage",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "create_landscape",
              "sculpt",
              "add_foliage",
              "paint_foliage"
            ],
            "description": "Environment action"
          },
          "name": {
            "type": "string",
            "description": "Object name"
          },
          "sizeX": {
            "type": "number",
            "description": "Landscape size X"
          },
          "sizeY": {
            "type": "number",
            "description": "Landscape size Y"
          },
          "tool": {
            "type": "string",
            "description": "Sculpt tool (Sculpt, Smooth, Flatten, etc.)"
          },
          "meshPath": {
            "type": "string",
            "description": "Mesh path"
          },
          "foliageType": {
            "type": "string",
            "description": "Foliage type"
          },
          "density": {
            "type": "number",
            "description": "Density"
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "brushSize": {
            "type": "number",
            "description": "Brush size"
          },
          "strength": {
            "type": "number",
            "description": "Tool strength"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "landscapeName": {
            "type": "string",
            "description": "Landscape actor name"
          },
          "foliageTypeName": {
            "type": "string",
            "description": "Foliage type name"
          },
          "instancesPlaced": {
            "type": "number",
            "description": "Number of foliage instances placed"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          }
        }
      }
    },
    {
      "name": "system_control",
      "description": "Control performance, audio, UI, screenshots, and engine lifecycle",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "profile",
              "show_fps",
              "set_quality",
              "play_sound",
              "create_widget",
              "show_widget",
              "screenshot",
              "engine_start",
              "engine_quit"
            ],
            "description": "System action"
          },
          "profileType": {
            "type": "string",
            "description": "Profile type (CPU, GPU, Memory)"
          },
          "category": {
            "type": "string",
            "description": "Quality category (Shadows, Textures, etc.)"
          },
          "level": {
            "type": "number",
            "description": "Quality level (0-4)"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable/disable"
          },
          "verbose": {
            "type": "boolean",
            "description": "Verbose output"
          },
          "soundPath": {
            "type": "string",
            "description": "Sound asset path"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "volume": {
            "type": "number",
            "description": "Volume (0-1)"
          },
          "is3D": {
            "type": "boolean",
            "description": "3D sound"
          },
          "widgetName": {
            "type": "string",
            "description": "Widget name"
          },
          "widgetType": {
            "type": "string",
            "description": "Widget type (HUD, Menu, etc.)"
          },
          "visible": {
            "type": "boolean",
            "description": "Visibility"
          },
          "resolution": {
            "type": "string",
            "description": "e.g. 1920x1080"
          },
          "projectPath": {
            "type": "string",
            "description": "Path to .uproject (for engine_start, optional if UE_PROJECT_PATH env set)"
          },
          "editorExe": {
            "type": "string",
            "description": "Path to UE Editor executable (optional if UE_EDITOR_EXE env set)"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded"
          },
          "profiling": {
            "type": "boolean",
            "description": "Profiling active state"
          },
          "fpsVisible": {
            "type": "boolean",
            "description": "FPS display state"
          },
          "qualityLevel": {
            "type": "number",
            "description": "Current quality level"
          },
          "soundPlaying": {
            "type": "boolean",
            "description": "Sound playback state"
          },
          "widgetPath": {
            "type": "string",
            "description": "Created widget path"
          },
          "widgetVisible": {
            "type": "boolean",
            "description": "Widget visibility state"
          },
          "imagePath": {
            "type": "string",
            "description": "Saved screenshot path"
          },
          "imageBase64": {
            "type": "string",
            "description": "Screenshot image base64 (truncated)"
          },
          "pid": {
            "type": "number",
            "description": "Process ID for launched editor"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          },
          "error": {
            "type": "string",
            "description": "Error message if failed"
          }
        }
      }
    },
    {
      "name": "console_command",
      "description": "Execute any console command in Unreal Engine",
      "inputSchema": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "Console command to execute"
          }
        },
        "required": [
          "command"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the command executed"
          },
          "command": {
            "type": "string",
            "description": "The command that was executed"
          },
          "result": {
            "type": "object",
            "description": "Command execution result"
          },
          "warning": {
            "type": "string",
            "description": "Warning if command may be unrecognized"
          },
          "info": {
            "type": "string",
            "description": "Additional information"
          },
          "error": {
            "type": "string",
            "description": "Error message if failed"
          }
        }
      }
    },
    {
      "name": "manage_rc",
      "description": "Manage Remote Control presets: create, expose, list fields, set/get values",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "create_preset",
              "expose_actor",
              "expose_property",
              "list_fields",
              "set_property",
              "get_property"
            ],
            "description": "RC action"
          },
          "name": {
            "type": "string",
            "description": "Preset or entity name"
          },
          "path": {
            "type": "string",
            "description": "Preset save path (e.g. /Game/RCPresets)"
          },
          "presetPath": {
            "type": "string",
            "description": "Preset asset path (e.g. /Game/RCPresets/MyPreset)"
          },
          "actorName": {
            "type": "string",
            "description": "Actor label/name to expose"
          },
          "objectPath": {
            "type": "string",
            "description": "Object path for property get/set"
          },
          "propertyName": {
            "type": "string",
            "description": "Property name for remote property set/get"
          },
          "value": {
            "description": "Value for property set (JSON-serializable)"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "presetPath": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "value": {},
          "error": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "manage_sequence",
      "description": "Create/open sequences, add camera, add actors to sequence",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "create",
              "open",
              "add_camera",
              "add_actor"
            ],
            "description": "Sequence action"
          },
          "name": {
            "type": "string",
            "description": "Sequence name (for create)"
          },
          "path": {
            "type": "string",
            "description": "Save path (for create), or asset path (for open)"
          },
          "actorName": {
            "type": "string",
            "description": "Actor name to add as possessable"
          },
          "spawnable": {
            "type": "boolean",
            "description": "If true, camera is spawnable"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "sequencePath": {
            "type": "string"
          },
          "cameraBindingId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "inspect",
      "description": "Inspect objects and set properties safely",
      "inputSchema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "inspect_object",
              "set_property"
            ],
            "description": "Inspection action"
          },
          "objectPath": {
            "type": "string",
            "description": "Object path"
          },
          "propertyName": {
            "type": "string",
            "description": "Property to set/get"
          },
          "value": {
            "description": "Value to set (JSON-serializable)"
          }
        },
        "required": [
          "action"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "info": {
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    }
  ],
  "individual": [
    {
      "name": "list_assets",
      "description": "List all assets in a directory",
      "inputSchema": {
        "type": "object",
        "properties": {
          "directory": {
            "type": "string",
            "description": "Directory path (e.g. /Game/Assets)"
          },
          "recursive": {
            "type": "boolean",
            "description": "List recursively"
          }
        },
        "required": [
          "directory"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string"
                },
                "Path": {
                  "type": "string"
                },
                "Class": {
                  "type": "string"
                },
                "PackagePath": {
                  "type": "string"
                }
              }
            }
          },
          "error": {
            "type": "string"
          },
          "note": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "import_asset",
      "description": "Import an asset from file system",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePath": {
            "type": "string",
            "description": "File system path to import from"
          },
          "destinationPath": {
            "type": "string",
            "description": "Project path to import to"
          }
        },
        "required": [
          "sourcePath",
          "destinationPath"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "spawn_actor",
      "description": "Spawn a new actor in the level",
      "inputSchema": {
        "type": "object",
        "properties": {
          "classPath": {
            "type": "string",
            "description": "Blueprint/class path"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "rotation": {
            "type": "object",
            "properties": {
              "pitch": {
                "type": "number"
              },
              "yaw": {
                "type": "number"
              },
              "roll": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "classPath"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "actor": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "delete_actor",
      "description": "Delete an actor from the level",
      "inputSchema": {
        "type": "object",
        "properties": {
          "actorName": {
            "type": "string",
            "description": "Name of the actor to delete"
          }
        },
        "required": [
          "actorName"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "deleted": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "create_material",
      "description": "Create a new material asset",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Material name"
          },
          "path": {
            "type": "string",
            "description": "Path to create material"
          }
        },
        "required": [
          "name",
          "path"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "materialPath": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "apply_material_to_actor",
      "description": "Apply a material to an actor in the level",
      "inputSchema": {
        "type": "object",
        "properties": {
          "actorPath": {
            "type": "string",
            "description": "Path to the actor"
          },
          "materialPath": {
            "type": "string",
            "description": "Path to the material asset"
          },
          "slotIndex": {
            "type": "number",
            "description": "Material slot index (default: 0)"
          }
        },
        "required": [
          "actorPath",
          "materialPath"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "play_in_editor",
      "description": "Start Play In Editor (PIE) mode",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "playing": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "stop_play_in_editor",
      "description": "Stop Play In Editor (PIE) mode",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "playing": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "set_camera",
      "description": "Set viewport camera position and rotation",
      "inputSchema": {
        "type": "object",
        "properties": {
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "rotation": {
            "type": "object",
            "properties": {
              "pitch": {
                "type": "number"
              },
              "yaw": {
                "type": "number"
              },
              "roll": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "location"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "location": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "rotation": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      }
    },
    {
      "name": "create_animation_blueprint",
      "description": "Create an animation blueprint",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Animation blueprint name"
          },
          "skeletonPath": {
            "type": "string",
            "description": "Path to skeleton"
          },
          "savePath": {
            "type": "string",
            "description": "Save location"
          }
        },
        "required": [
          "name",
          "skeletonPath"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "blueprintPath": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "play_animation_montage",
      "description": "Play an animation montage on an actor",
      "inputSchema": {
        "type": "object",
        "properties": {
          "actorName": {
            "type": "string",
            "description": "Actor name"
          },
          "montagePath": {
            "type": "string",
            "description": "Path to montage"
          },
          "playRate": {
            "type": "number",
            "description": "Playback rate"
          }
        },
        "required": [
          "actorName",
          "montagePath"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "playing": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "setup_ragdoll",
      "description": "Setup ragdoll physics for a skeletal mesh",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skeletonPath": {
            "type": "string",
            "description": "Path to skeleton"
          },
          "physicsAssetName": {
            "type": "string",
            "description": "Physics asset name"
          },
          "blendWeight": {
            "type": "number",
            "description": "Blend weight (0-1)"
          }
        },
        "required": [
          "skeletonPath",
          "physicsAssetName"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "ragdollActive": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "apply_force",
      "description": "Apply force to an actor",
      "inputSchema": {
        "type": "object",
        "properties": {
          "actorName": {
            "type": "string",
            "description": "Actor name"
          },
          "force": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "actorName",
          "force"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "physicsEnabled": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "create_particle_effect",
      "description": "Create a Niagara particle effect",
      "inputSchema": {
        "type": "object",
        "properties": {
          "effectType": {
            "type": "string",
            "description": "Effect type (Fire, Smoke, Water, etc.)"
          },
          "name": {
            "type": "string",
            "description": "Effect name"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "effectType",
          "name",
          "location"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "effectName": {
            "type": "string"
          },
          "effectPath": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "spawn_niagara_system",
      "description": "Spawn a Niagara system in the level",
      "inputSchema": {
        "type": "object",
        "properties": {
          "systemPath": {
            "type": "string",
            "description": "Path to Niagara system"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "scale": {
            "type": "number",
            "description": "Scale factor"
          }
        },
        "required": [
          "systemPath",
          "location"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "spawned": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "create_blueprint",
      "description": "Create a new blueprint",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Blueprint name"
          },
          "blueprintType": {
            "type": "string",
            "description": "Type (Actor, Pawn, Character, etc.)"
          },
          "savePath": {
            "type": "string",
            "description": "Save location"
          }
        },
        "required": [
          "name",
          "blueprintType"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "blueprintPath": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "add_blueprint_component",
      "description": "Add a component to a blueprint",
      "inputSchema": {
        "type": "object",
        "properties": {
          "blueprintName": {
            "type": "string",
            "description": "Blueprint name"
          },
          "componentType": {
            "type": "string",
            "description": "Component type"
          },
          "componentName": {
            "type": "string",
            "description": "Component name"
          }
        },
        "required": [
          "blueprintName",
          "componentType",
          "componentName"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "componentAdded": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "warning": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "load_level",
      "description": "Load a level",
      "inputSchema": {
        "type": "object",
        "properties": {
          "levelPath": {
            "type": "string",
            "description": "Path to level"
          },
          "streaming": {
            "type": "boolean",
            "description": "Use streaming"
          }
        },
        "required": [
          "levelPath"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "levelName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "save_level",
      "description": "Save the current level",
      "inputSchema": {
        "type": "object",
        "properties": {
          "levelName": {
            "type": "string",
            "description": "Level name"
          },
          "savePath": {
            "type": "string",
            "description": "Save path"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "stream_level",
      "description": "Stream a level in or out",
      "inputSchema": {
        "type": "object",
        "properties": {
          "levelName": {
            "type": "string",
            "description": "Level name"
          },
          "shouldBeLoaded": {
            "type": "boolean",
            "description": "Load or unload"
          },
          "shouldBeVisible": {
            "type": "boolean",
            "description": "Make visible"
          }
        },
        "required": [
          "levelName",
          "shouldBeLoaded",
          "shouldBeVisible"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "loaded": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "create_light",
      "description": "Create a light in the level",
      "inputSchema": {
        "type": "object",
        "properties": {
          "lightType": {
            "type": "string",
            "description": "Light type (Directional, Point, Spot, Rect)"
          },
          "name": {
            "type": "string",
            "description": "Light name"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "intensity": {
            "type": "number",
            "description": "Light intensity"
          }
        },
        "required": [
          "lightType",
          "name"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "lightName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "build_lighting",
      "description": "Build lighting for the current level",
      "inputSchema": {
        "type": "object",
        "properties": {
          "quality": {
            "type": "string",
            "description": "Quality (Preview, Medium, High, Production)"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "quality": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "create_landscape",
      "description": "Create a new landscape",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Landscape name"
          },
          "sizeX": {
            "type": "number",
            "description": "Size X"
          },
          "sizeY": {
            "type": "number",
            "description": "Size Y"
          },
          "materialPath": {
            "type": "string",
            "description": "Material path"
          }
        },
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "landscapeName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "sculpt_landscape",
      "description": "Sculpt the landscape",
      "inputSchema": {
        "type": "object",
        "properties": {
          "landscapeName": {
            "type": "string",
            "description": "Landscape name"
          },
          "tool": {
            "type": "string",
            "description": "Tool (Sculpt, Smooth, Flatten, etc.)"
          },
          "brushSize": {
            "type": "number",
            "description": "Brush size"
          },
          "strength": {
            "type": "number",
            "description": "Tool strength"
          }
        },
        "required": [
          "landscapeName",
          "tool"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "add_foliage_type",
      "description": "Add a foliage type",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Foliage type name"
          },
          "meshPath": {
            "type": "string",
            "description": "Path to mesh"
          },
          "density": {
            "type": "number",
            "description": "Density"
          }
        },
        "required": [
          "name",
          "meshPath"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "foliageTypeName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "paint_foliage",
      "description": "Paint foliage on landscape",
      "inputSchema": {
        "type": "object",
        "properties": {
          "foliageType": {
            "type": "string",
            "description": "Foliage type"
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "brushSize": {
            "type": "number",
            "description": "Brush size"
          }
        },
        "required": [
          "foliageType",
          "position"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "instancesPlaced": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "draw_debug_shape",
      "description": "Draw a debug shape",
      "inputSchema": {
        "type": "object",
        "properties": {
          "shape": {
            "type": "string",
            "description": "Shape type (Line, Box, Sphere, etc.)"
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "size": {
            "type": "number",
            "description": "Size/radius"
          },
          "color": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "RGBA color"
          },
          "duration": {
            "type": "number",
            "description": "Duration in seconds"
          }
        },
        "required": [
          "shape",
          "position"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "set_view_mode",
      "description": "Set the viewport view mode",
      "inputSchema": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "View mode (Lit, Unlit, Wireframe, etc.)"
          }
        },
        "required": [
          "mode"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "viewMode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "start_profiling",
      "description": "Start performance profiling",
      "inputSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Profiling type (CPU, GPU, Memory, etc.)"
          },
          "duration": {
            "type": "number",
            "description": "Duration in seconds"
          }
        },
        "required": [
          "type"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "profiling": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "show_fps",
      "description": "Show FPS counter",
      "inputSchema": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable FPS display"
          },
          "verbose": {
            "type": "boolean",
            "description": "Show verbose stats"
          }
        },
        "required": [
          "enabled"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "fpsVisible": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "set_scalability",
      "description": "Set scalability settings",
      "inputSchema": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category (Shadows, Textures, Effects, etc.)"
          },
          "level": {
            "type": "number",
            "description": "Quality level (0-4)"
          }
        },
        "required": [
          "category",
          "level"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "qualityLevel": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "play_sound",
      "description": "Play a sound",
      "inputSchema": {
        "type": "object",
        "properties": {
          "soundPath": {
            "type": "string",
            "description": "Path to sound asset"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "volume": {
            "type": "number",
            "description": "Volume (0-1)"
          },
          "is3D": {
            "type": "boolean",
            "description": "3D or 2D sound"
          }
        },
        "required": [
          "soundPath"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "soundPlaying": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "create_ambient_sound",
      "description": "Create an ambient sound",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Sound name"
          },
          "soundPath": {
            "type": "string",
            "description": "Path to sound"
          },
          "location": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            }
          },
          "radius": {
            "type": "number",
            "description": "Sound radius"
          }
        },
        "required": [
          "name",
          "soundPath",
          "location"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "soundName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "create_widget",
      "description": "Create a UI widget",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Widget name"
          },
          "type": {
            "type": "string",
            "description": "Widget type (HUD, Menu, etc.)"
          },
          "savePath": {
            "type": "string",
            "description": "Save location"
          }
        },
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "widgetPath": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "show_widget",
      "description": "Show or hide a widget",
      "inputSchema": {
        "type": "object",
        "properties": {
          "widgetName": {
            "type": "string",
            "description": "Widget name"
          },
          "visible": {
            "type": "boolean",
            "description": "Show or hide"
          }
        },
        "required": [
          "widgetName",
          "visible"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "widgetVisible": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "create_hud",
      "description": "Create a HUD",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "HUD name"
          },
          "elements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Element type"
                },
                "position": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "hudPath": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "console_command",
      "description": "Execute any console command in Unreal Engine",
      "inputSchema": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "Console command to execute"
          }
        },
        "required": [
          "command"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "command": {
            "type": "string"
          },
          "result": {
            "type": "object"
          },
          "warning": {
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  ]
}